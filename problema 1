import threading
import time
import random

# 1. Problema del Productor-Consumidor
class ProducerConsumer:
    def __init__(self):
        self.buffer = []
        self.buffer_size = 5
        self.lock = threading.Semaphore(1)
        self.empty = threading.Semaphore(self.buffer_size)
        self.full = threading.Semaphore(0)
    
    def producer(self):
        for _ in range(10):
            self.empty.acquire()
            self.lock.acquire()
            item = random.randint(1, 100)
            self.buffer.append(item)
            print(f"Productor produjo: {item}")
            self.lock.release()
            self.full.release()
            time.sleep(random.random())
    
    def consumer(self):
        for _ in range(10):
            self.full.acquire()
            self.lock.acquire()
            item = self.buffer.pop(0)
            print(f"Consumidor consumi√≥: {item}")
            self.lock.release()
            self.empty.release()
            time.sleep(random.random())
